generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Parent {
  id         Int       @id @default(autoincrement())
  name       String
  gender     String?
  address    String
  email      String    @unique
  phone      String
  age        Int
  password   String
  isVerified Boolean   @default(false)
  otp        Int?
  createdAt  DateTime?
  updatedAt  DateTime?

  students Student[]
}

model Student {
  id         Int      @id @default(autoincrement())
  name       String
  gender     String?
  address    String
  email      String   @unique
  phone      String?
  password   String
  score      Int?
  isBlocked  Boolean  @default(false)
  parentId   Int?
  avatar     String
  coverImage String?
  cardId     String?
  dob        DateTime
  createdAt  DateTime
  updatedAt  DateTime

  parent              Parent?                       @relation(fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  coachingPayments    CoachingFeePaymentByStudent[]
  collegePayments     CollegeFeePaymentByStudent[]
  coachingEnrollments CoachingStudent[]
  collegeEnrollments  CollegeStudent[]
  admissionRequests   StudentAdmissionRequest[]
}

model Coaching {
  id          Int      @id @default(autoincrement())
  address     String
  field       String
  title       String
  name        String
  owner_name  String
  owner_email String
  owner_phone String?
  password    String
  description String?
  images      String[] @default([])
  logo        String
  phone       String
  email       String
  website     String?
  createdAt   DateTime
  updatedAt   DateTime

  classes           Class[]
  pricings          CoachingClassPricing[]
  payments          CoachingFeePaymentByStudent[]
  students          CoachingStudent[]
  admissionRequests StudentAdmissionRequest[]
}

model College {
  id          Int      @id @default(autoincrement())
  title       String
  name        String
  address     String
  field       String
  owner_name  String
  owner_email String
  owner_phone String?
  password    String
  description String?
  images      String[] @default([])
  logo        String
  phone       String
  email       String
  website     String?
  createdAt   DateTime
  updatedAt   DateTime

  classes           Class[]
  pricings          CollegeClassPricing[]
  payments          CollegeFeePaymentByStudent[]
  students          CollegeStudent[]
  admissionRequests StudentAdmissionRequest[]
}

model Class {
  id         Int       @id @default(autoincrement())
  name       String
  stander    String
  field      String
  studentId  Int
  collegeId  Int?
  coachingId Int?
  session    DateTime?
  createdAt  DateTime
  updatedAt  DateTime

  college             College?                      @relation(fields: [collegeId], references: [id])
  coaching            Coaching?                     @relation(fields: [coachingId], references: [id])
  payments            CoachingFeePaymentByStudent[]
  collegePayments     CollegeFeePaymentByStudent[]
  coachingEnrollments CoachingStudent[]
  collegeEnrollments  CollegeStudent[]
}

model CoachingClassPricing {
  id         Int      @id @default(autoincrement())
  price      Float
  coachingId Int
  stander    Int
  duration   DateTime
  createdAt  DateTime
  updatedAt  DateTime

  coaching Coaching                      @relation(fields: [coachingId], references: [id],onDelete: Cascade,onUpdate: Cascade)
  payments CoachingFeePaymentByStudent[]
}

model CollegeClassPricing {
  id        Int      @id @default(autoincrement())
  price     Float
  collegeId Int
  stander   Int
  duration  Int
  createdAt DateTime
  updatedAt DateTime

  college  College                      @relation(fields: [collegeId], references: [id],onDelete: Cascade,onUpdate: Cascade)
  payments CollegeFeePaymentByStudent[]
}

model CoachingFeePaymentByStudent {
  id                     Int      @id @default(autoincrement())
  transactionId          String
  studentId              Int
  coachingId             Int
  classId                Int
  price                  Float
  expireDuration         Int
  status                 String   @default("PENDING")
  coachingClassPricingId Int
  createdAt              DateTime
  updatedAt              DateTime

  student              Student              @relation(fields: [studentId], references: [id])
  coaching             Coaching             @relation(fields: [coachingId], references: [id])
  class                Class                @relation(fields: [classId], references: [id])
  coachingClassPricing CoachingClassPricing @relation(fields: [coachingClassPricingId], references: [id],onDelete: Cascade,onUpdate: Cascade)
}

model CollegeFeePaymentByStudent {
  id                    Int      @id @default(autoincrement())
  transactionId         String
  studentId             Int
  collegeId             Int
  classId               Int
  price                 Float
  collegeClassPricingId Int
  expireDuration        Int
  status                String   @default("Payment Pending")
  createdAt             DateTime
  updatedAt             DateTime

  student             Student             @relation(fields: [studentId], references: [id],onDelete: Cascade,onUpdate: Cascade)
  college             College             @relation(fields: [collegeId], references: [id],onDelete: Cascade,onUpdate: Cascade)
  class               Class               @relation(fields: [classId], references: [id],onDelete: Cascade,onUpdate: Cascade)
  collegeClassPricing CollegeClassPricing @relation(fields: [collegeClassPricingId], references: [id],onDelete: Cascade,onUpdate: Cascade)
}

model CoachingStudent {
  id         Int      @id @default(autoincrement())
  rollNumber Int
  coachingId Int
  studentId  Int
  classId    Int
  createdAt  DateTime
  updatedAt  DateTime

  coaching Coaching @relation(fields: [coachingId], references: [id])
  student  Student  @relation(fields: [studentId], references: [id])
  class    Class    @relation(fields: [classId], references: [id])
}

model CollegeStudent {
  id         Int      @id @default(autoincrement())
  rollNumber Int
  collegeId  Int
  studentId  Int
  classId    Int
  createdAt  DateTime
  updatedAt  DateTime

  college College @relation(fields: [collegeId], references: [id])
  student Student @relation(fields: [studentId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])
}

model StudentAdmissionRequest {
  id          Int      @id @default(autoincrement())
  studentId   Int
  collegeId   Int?
  coachingId  Int?
  field       String
  title       String
  stander     String
  description String
  isAccept    Boolean  @default(false)
  reason      String?
  createdAt   DateTime
  updatedAt   DateTime

  student  Student   @relation(fields: [studentId], references: [id])
  college  College?  @relation(fields: [collegeId], references: [id])
  coaching Coaching? @relation(fields: [coachingId], references: [id])
}
